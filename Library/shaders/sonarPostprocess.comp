/*    
    Copyright (c) 2020 Patryk Cieslak. All rights reserved.

    This file is a part of Stonefish.

    Stonefish is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    Stonefish is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

#version 430

layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

// One input - intensity for each bin/beam combination
layout(r32f) uniform image2D sonarOutput;

// One output - intensity for each bin/beam combination
layout(r32f) uniform image2D sonarPost;

uniform vec3 noiseSeed;
uniform vec2 noiseStddev;

#define M_PI 3.1415926535897932384626433832795
#define GAUSSIAN_WIDTH 5

const float sampleWeight2D[GAUSSIAN_WIDTH][GAUSSIAN_WIDTH] = 
{
    //{0.003765, 0.015019, 0.023792, 0.015019, 0.003765}, //sigma = 1.0
    ///{0.015019, 0.059912, 0.094907, 0.059912, 0.015019},
    //{0.023792, 0.094907, 0.150342, 0.094907, 0.023792},
    //{0.015019, 0.059912, 0.094907, 0.059912, 0.015019},
    //{0.003765, 0.015019, 0.023792, 0.015019, 0.003765}
    {0.000002, 0.000212, 0.000922, 0.000212, 0.000002}, //sigma = 0.5
    {0.000212, 0.024745, 0.107391, 0.024745, 0.000212},
    {0.000922, 0.107391, 0.466066, 0.107391, 0.000922},
    {0.000212, 0.024745, 0.107391, 0.024745, 0.000212},
    {0.000002, 0.000212, 0.000922, 0.000212, 0.000002}
};

float sigmoid(float x)
{
    float t = (x - 0.6666667) * 18.0;
    return (0.5 * tanh(0.5 * t) + 0.5);
}

float rand(vec2 coord)
{
    // This one-liner can be found in many places, including:
    // http://stackoverflow.com/questions/4200224/random-noise-functions-for-glsl
    // I can't find any explanation for it, but experimentally it does seem to
    // produce approximately uniformly distributed values in the interval [0,1].
    return fract(sin(dot(coord.xy, vec2(12.9898,78.233))) * 43758.5453);
}

float gaussian(vec2 coord, float stddev, float mean)
{
    // Box-Muller method for sampling from the normal distribution
    // http://en.wikipedia.org/wiki/Normal_distribution#Generating_values_from_normal_distribution
    // This method requires 2 uniform random inputs and produces 2 
    // Gaussian random outputs. 3rd random variable is used to switch between the two outputs.
    float U, V, R, Z;
    // Add in the CPU-supplied random noiseSeed to generate the 3 random values.
    U = rand(coord + vec2(noiseSeed.x, noiseSeed.x))+0.0000001;
    V = rand(coord + vec2(noiseSeed.y, noiseSeed.y))+0.0000001;
    R = rand(coord + vec2(noiseSeed.z, noiseSeed.z))+0.0000001;
    // Switch between the two random outputs.
    if(R < 0.5)
        Z = sqrt(-2.0 * log(U)) * sin(2.0 * M_PI * V);
    else
        Z = sqrt(-2.0 * log(U)) * cos(2.0 * M_PI * V);

    // Apply the stddev and mean.
    Z = Z * stddev + mean;

    // Return it as a vec4, to be added to the input ("true") color.
    return Z;
}

void main()
{
    ivec2 dim = ivec2(imageSize(sonarOutput).xy); //nBeams x nBins
    ivec2 coords = ivec2(gl_GlobalInvocationID.xy);
    if(coords.x < dim.x && coords.y < dim.y)
    {
        //Gaussian blur
        float value = 0.0;
        for(int i=-GAUSSIAN_WIDTH/2; i<=GAUSSIAN_WIDTH/2; ++i) //Horizontal blur (beam interference)
            for(int h=-GAUSSIAN_WIDTH/2; h<=GAUSSIAN_WIDTH/2; ++h) //Vertical blur (remove artifacts due to insufficient beam sampling)
                value += sampleWeight2D[i+GAUSSIAN_WIDTH/2][h+GAUSSIAN_WIDTH/2] * imageLoad(sonarOutput, ivec2(coords.x+i, coords.y+h)).r;
        
        //Apply sigmoidal transform
        //value = sigmoid(value);

        //Apply noise
        vec2 noiseCoord = vec2(float(coords.x)/float(dim.x-1), float(coords.y)/float(dim.y-1));
        value *= gaussian(noiseCoord.xx, noiseStddev.x, 1.0); //Multiplicative noise
        value += gaussian(-noiseCoord, noiseStddev.y, 0.0); //Additive noise
        value = clamp(value, 0.0, 1.0);

        //Store data 
        imageStore(sonarPost, coords, vec4(value));
    }
}